<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python Pandas库如何优雅的与数据库交互</title>
    <url>/2020/03/18/python-pandas-pgsql-interaction/</url>
    <content><![CDATA[<div id="content">

<div id="outline-container-org992dc0c" class="outline-2">
<h2 id="org992dc0c">问题描述</h2>
<div class="outline-text-2" id="text-org992dc0c">
<p>
最近在做项目的时候遇到稍微复杂的一个场景,需要夸多组件数据处理。具体流程如下：
</p>
<ul class="org-ul">
<li>从 <code>google</code> <code>bigquery</code> 大叔据平台将计算和聚合过的每小时结果集存在 <code>pandas</code> 的 <code>dataframe</code> 中。</li>
<li><code>pandas</code> 的数据与 <code>postgresql</code> 数据库同步, 将结果集中有些字段为空的部分从 <code>postgresq</code> 中再回填给 <code>pandas</code> 的 <code>dataframe</code> 中。</li>
<li>合并之后的结果在更新入 <code>postgresq</code>, 同时写入 <code>hive</code> 表中便于后期用 <code>presto</code> 做长查询。</li>
</ul>

<p>
本来这套逻辑似乎更适用于 <code>spark</code> <code>map reduce</code> 来做，但是由于 <code>bigquery</code> 的计算分布在几十个 <code>gcp project</code> 里面。
<code>spark</code> 调用 <code>bigquery</code> 的话配置权限很麻烦，同时结果集每小时的大小也只在三万到十万级别。 
计算任务是在 <code>bigquery</code> 中完成, 所以这时候调用 <code>spark</code> 似乎有点重了。所以决定使用 <code>python pandas</code>  配合别的大数据主件。
</p>

<p>
<code>bigquer</code> 每次会计算历史10几个小时的聚合结果集，按照每小时3-10万的量算下来，最多一次合并 <code>postgresq</code> 的量级在百万以内。
这个量级在合并的时候从 <code>pgsql</code> 拉数据下来，再在内存中用 <code>pandas</code> 做 <code>join</code> 明显不是明智的选择。 
从 <code>pgsql</code> 中 <code>select</code> 百万记录下来 <code>pandas</code> <code>join</code> 完之后再上传 <code>pqsql</code> ，再 <code>update</code> 无疑增加了计算的复杂度。
所以我的选择是: <b>按小时将 <code>pandas</code> <code>dataframe</code> 上传到 <code>pgsql</code> 临时表， 直接在数据库中做 <code>join</code> 并 <code>update</code> <code>pgsql</code> 中的记录</b> 。
</p>

<p>
因此我们需要实现的就是如何优雅的把 <code>pandas dataframe</code> 上传到 <code>pgsql</code> 的临时表，并提供接口操作临时表和已有的表做运算。
</p>
</div>
</div>

<div id="outline-container-org465d3e0" class="outline-2">
<h2 id="org465d3e0">解决方案</h2>
<div class="outline-text-2" id="text-org465d3e0">
<p>
虽然 <code>pandas</code> 自己也带了数据库连接的接口，但是过于简单，不能满足复杂的处理过程。
但是又不想用很重的库如 <code>sqlalchemy</code> 等支持 <code>ORM</code> 的库，觉得还是对程序员不友好。而且要写很多手脚架来适配。
</p>

<p>
所以这里推荐我常用的数据库连接库 <a href="https://github.com/kennethreitz-archive/records" target="_blank" rel="noopener">records</a>
</p>


<div class="figure">
<p><img src="http://q78cpsmed.bkt.clouddn.com/python-pandas-pgsql-interaction/records.jpg">
</p>
</div>

<ul class="org-ul">
<li><p>
动态解析 <code>pandas dataframe</code> 对应的数据库临时表的 <code>schema</code> 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">def</span> <span style="font-weight: bold;">infer_pd_schema</span>(df):
    <span style="font-style: italic;">'''infer pandas dataframe schema</span>
<span style="font-style: italic;">    '''</span>
    <span style="font-weight: bold; font-style: italic;">schema</span> = []
    <span style="font-weight: bold; font-style: italic;">type_map</span> = {
        <span style="font-style: italic;">'int64'</span>: <span style="font-style: italic;">'int8'</span>,
        <span style="font-style: italic;">'object'</span>: <span style="font-style: italic;">'varchar(512)'</span>,
        <span style="font-style: italic;">'float64'</span>: <span style="font-style: italic;">'float8'</span>}

    <span style="font-weight: bold;">for</span> col, tp <span style="font-weight: bold;">in</span> df.dtypes.items():
        <span style="font-weight: bold; font-style: italic;">t</span> = type_map[tp.name]
        <span style="font-weight: bold; font-style: italic;">item</span> = f<span style="font-style: italic;">'''"{col}"  {t}'''</span>
        schema.append(item)
    <span style="font-weight: bold;">return</span> <span style="font-style: italic;">', '</span>.join(schema)
</pre>
</div>

<p>
如果要增加跟多复杂的类型作为 <code>pandas dataframe</code> 和 <code>pgsql</code> 的映射，可以往 <code>type_map</code> 里面添加对应的类型。
或者你也可以修改非 <code>pgsql</code> 的类型数据库对应的字段，以匹配你真实的需求。
</p></li>

<li><p>
上传 <code>pandas dataframe</code> 数据到数据库临时表
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">def</span> <span style="font-weight: bold;">create_temp_table_with_df</span>(conn, table, dataframe):
    <span style="font-style: italic;">'''conn is a pgsql connect transaction</span>
<span style="font-style: italic;">    table is the name of the temp table and df is the pandas dataframe</span>
<span style="font-style: italic;">    '''</span>
    <span style="font-weight: bold; font-style: italic;">schema</span> = infer_pd_schema(dataframe)
    conn.query(f<span style="font-style: italic;">'drop table if exists {table}'</span>)

    <span style="font-weight: bold; font-style: italic;">query</span> = f<span style="font-style: italic;">'''create TEMPORARY table if not exists {table}</span>
<span style="font-style: italic;">    ({schema});'''</span>
    logger.info(query)
    conn.query(query)

    <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">After testing, threads will not improve the uploading performance</span>
    <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">here is a tricky way to upload a pandas dataframe to pgsql without "insert" query.</span>
    <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">600,000 records can be delivered within secs.</span>

    <span style="font-weight: bold;">with</span> tempfile.NamedTemporaryFile() <span style="font-weight: bold;">as</span> tf:
        <span style="font-weight: bold; font-style: italic;">name</span> = tf.name
        logger.info(f<span style="font-style: italic;">'creating temp data file {name}'</span>)
        dataframe.to_csv(name, header=<span style="font-weight: bold; text-decoration: underline;">True</span>, index=<span style="font-weight: bold; text-decoration: underline;">False</span>)
        <span style="font-weight: bold; font-style: italic;">query</span> = f<span style="font-style: italic;">'''</span>
<span style="font-style: italic;">        copy {table} from STDIN WITH (FORMAT CSV, HEADER TRUE)</span>
<span style="font-style: italic;">        '''</span>
        <span style="font-weight: bold; font-style: italic;">rconn</span> = conn._conn.connection
        <span style="font-weight: bold; font-style: italic;">cursor</span> = rconn.cursor()
        <span style="font-weight: bold;">with</span> <span style="font-weight: bold;">open</span>(name, <span style="font-style: italic;">'r'</span>) <span style="font-weight: bold;">as</span> f:
            cursor.copy_expert(query, f)
        rconn.commit()
    logger.info(<span style="font-style: italic;">'upload data done'</span>)
</pre>
</div>

<p>
当 <code>pandas</code> 的数据量很大比如几百万条记录时， <code>sql insert</code> 操作的性能往往不会很好。即便是使用多线程操作，性能的提升也是不明显。
这里我采用了 <code>pgsql</code> 的 <code>copy</code> 命令， 很 <code>tricky</code> 的深入了 <code>records</code> 库的低层 <code>connection</code> 调用方法。 百万级的记录上传只需要秒级就可以完成。
</p></li>

<li><p>
对 <code>pandas dataframe</code> 的临时表与数据库中已经有的表做联合操作
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">def</span> <span style="font-weight: bold;">query_pg_with_df</span>(table, dataframe, sql):
    <span style="font-style: italic;">'''Temp upload pandas dataframe to pgsql for interaction with tables in pg.</span>
<span style="font-style: italic;">    return a pandas dataframe</span>
<span style="font-style: italic;">    '''</span>
    <span style="font-weight: bold; font-style: italic;">pgdb</span> = records.Database(
        <span style="font-style: italic;">'postgres://{host}/{db}?user={user}&amp;password={pwd}'</span>.<span style="font-weight: bold;">format</span>(
            host=PG_SQL_HOST,
            db=PG_SQL_NAME,
            user=PG_SQL_USER,
            pwd=PG_SQL_PASS)
    )

    <span style="font-weight: bold;">try</span>:
        <span style="font-weight: bold;">with</span> pgdb.transaction() <span style="font-weight: bold;">as</span> conn:
            create_temp_table_with_df(conn, table, dataframe)
            logger.info(sql)
            <span style="font-weight: bold; font-style: italic;">res</span> = conn.query(sql)
            <span style="font-weight: bold;">return</span> pd.DataFrame(res.as_dict())
    <span style="font-weight: bold;">except</span> <span style="font-weight: bold; text-decoration: underline;">Exception</span> <span style="font-weight: bold;">as</span> e:
        logger.error(e.msg)
    <span style="font-weight: bold;">finally</span>:
        pgdb.close()
</pre>
</div>

<p>
这里函数中的 <code>table</code> 变量是指后面 <code>pandas dataframe</code> 上传至 <code>pgsql</code> 之后的临时表名。变量 <code>sql</code> 就可以操作这个临时表和数据库里面其他表做正常的类似 <code>join</code> 的操作。
返回的结果是一个 <code>pandas dataframe</code> 。 这样就可以在内存中做后续进一步的处理了。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgaa63b97" class="outline-2">
<h2 id="orgaa63b97">总结</h2>
<div class="outline-text-2" id="text-orgaa63b97">
<ul class="org-ul">
<li>如果采用 <code>sql insert</code> 一条条纪录的话，性能不能符合要求，所以采用了 <code>copy csv</code> 的方式。</li>
<li>提供了 <code>pandas dataframe</code> 如何与 <code>pgsql</code> 里的表做交互比如 <code>join</code> 等操作。</li>
<li>可以根据实际采用的 <code>sql</code> 服务类型，修改此代码 <code>porting</code> 到 <code>mysql</code> 或者别的 <code>sql service</code> 。</li>
</ul>
</div>
</div>
</div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>programming</category>
        <category>bigdata</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>pgsql</tag>
        <tag>hive</tag>
        <tag>presto</tag>
      </tags>
  </entry>
  <entry>
    <title>基于postfix和dovecot搭建个人邮件服务器</title>
    <url>/2020/03/15/postfix-dovecot-config/</url>
    <content><![CDATA[<div id="content">

<div id="outline-container-orgfd455f5" class="outline-2">
<h2 id="orgfd455f5">准备工作</h2>
<div class="outline-text-2" id="text-orgfd455f5">
<ul class="org-ul">
<li>首先你需要一个 <code>Linux</code> 的 <code>VPS</code> ，以及一个可以用的域名。
<code>VPS</code> 的操作系统可以选 <code>Ubuntu</code> 或者 <code>centos</code> 等主流的 <code>Linux</code> 系统。
同时删除原来系统里面的 <code>sentmail</code> 相关的 <code>package</code> 。</li>
<li>在你的域名供应商的平台上配置好你的域名解析。
一般情况下，需要配置3种域名解析类型， 分别是 <code>A</code>, <code>MX</code>, <code>TXT</code>
下面是我的配置, 我用的是阿里云的域名服务：
<img src="http://q78cpsmed.bkt.clouddn.com/postfix-dovecot-config/domain_configure.png"></li>
<li><p>
在 <code>VPS</code> 上安装好 <code>postfix</code> ， <code>dovecot</code> ， <code>sasl-dev</code> 等软件。
<code>libsasl</code> 是 <code>postfix</code> 和 <code>dovecot</code> 认证用的。你需要根据你的 <code>VPS</code> 操作系统的类型选择对应的包管理工具安装这些包。
</p>
<pre class="example">postfix-2.10.1-7.el7.x86_64
dovecot-2.2.36-3.el7_7.1.x86_64
dovecot-mysql-2.2.36-3.el7_7.1.x86_64
cyrus-sasl-lib-2.1.26-23.el7.x86_64
cyrus-sasl-plain-2.1.26-23.el7.x86_64
cyrus-sasl-2.1.26-23.el7.x86_64
</pre></li>
<li>在 <code>VPS</code> 上创建一个用户，你的邮箱就是这个用户名，目前没有尝试用 <code>LDAP</code> 服务和 <code>postfix</code> 服务做集成。</li>
<li>最好还能有一个可以有一个常用的别的邮箱如 <code>gmail</code> 等作为 <code>relay sever</code>, 这是因为 <b>私有的邮件服务器发送出去的邮件会被认为是垃圾邮件</b> 。
据说是可以配置 <code>domain</code> 的 <code>TXT</code> 类型的记录可以解决这个问题，但是我没尝试成功。</li>
</ul>
</div>
</div>

<div id="outline-container-org9efa209" class="outline-2">
<h2 id="org9efa209">配置的详细过程</h2>
<div class="outline-text-2" id="text-org9efa209">
</div>
<div id="outline-container-org78c22b2" class="outline-3">
<h3 id="org78c22b2">配置SSL证书</h3>
<div class="outline-text-3" id="text-org78c22b2">
</div>
<div id="outline-container-org7a1782c" class="outline-4">
<h4 id="org7a1782c">生成私有证书</h4>
<div class="outline-text-4" id="text-org7a1782c">
<p>
可以手动生成私有证书， 也可以通过acme tools 生成对应的SSL证书。
</p>
<ul class="org-ul">
<li><p>
生成根证书及私钥
</p>
<div class="org-src-container">
<pre class="src src-bash">openssl genrsa -out private/cakey.pem 1024 <span style="font-weight: bold; font-style: italic;">#</span><span style="font-weight: bold; font-style: italic;">生成CA根证书私钥</span>
openssl req -new -x509 -key private/cakey.pem  -out cacert.pem <span style="font-weight: bold; font-style: italic;">#</span><span style="font-weight: bold; font-style: italic;">生成CA根证书</span>
</pre>
</div></li>

<li><p>
生成服务器证书私钥、证书
</p>

<div class="org-src-container">
<pre class="src src-bash">openssl genrsa -out private/yourdomain.key 1024
openssl req -new -key private/server.key -out crl/yourdomain.csr <span style="font-weight: bold; font-style: italic;">#</span><span style="font-weight: bold; font-style: italic;">生成证书请求文件，可提供认证CA签核，或自签名。</span>
openssl ca -in crl/server.csr -out certs/yourdomain.crt <span style="font-weight: bold; font-style: italic;">#</span><span style="font-weight: bold; font-style: italic;">自签名证书</span>
</pre>
</div></li>
</ul>

<p>
最后将生成的 <code>key</code> 和 <code>crt</code> 文件放到 <code>/etc/ssl/</code> 下对应的 <code>certs</code> , <code>private</code> 目录下面即可。
</p>
</div>
</div>
</div>

<div id="outline-container-orga530b6d" class="outline-3">
<h3 id="orga530b6d">配置Postfix</h3>
<div class="outline-text-3" id="text-orga530b6d">
<ul class="org-ul">
<li><p>
编辑 <code>/etc/postfix/main.cf</code> 文件，配置域名，证书并起用 <code>SSL</code> 以及 <code>sasl</code> 的选项。
</p>

<pre class="example">myhostname = xxxxx.com 
mydomain = xxxx.com
smtpd_use_tls = yes
smtp_tls_mandatory_protocols = !SSLv2, !SSLv3
smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3
smtpd_tls_cert_file = /etc/pki/tls/certs/yourdomain.crt
smtpd_tls_key_file = /etc/pki/tls/private/yourdomain.key
smtpd_tls_session_cache_database = btree:/etc/postfix/smtpd_scache
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
smtpd_sasl_local_domain = $mydomain
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
</pre>

<p>
<code>myhostname</code> , <code>mydomain</code> 填上你真实的域名, 同时，修改真实的 <code>ssl</code> 证书的路径。
</p></li>
<li><p>
编辑 <code>/etc/postfix/generic</code> 文件。
添加一行到文件最后面
</p>

<pre class="example">@domainname   xxxxx.gmail.com
</pre>

<p>
其中 <code>domainname</code> 替换为你申请的域名， <code>xxxxx.gmail.com</code> 为你之前准备的可以作为 <code>relay server</code> 的邮箱。
配置到这里，表示使用该账号发送邮件出去，目的是为了避免你发出去的邮件被认为是垃圾邮件。
</p></li>
<li><p>
编辑或创建 <code>/etc/postfix/sasl_passwd</code> 文件。
添加一行到文件最后面
</p>

<pre class="example">[smtp.gmail.com]:587    account@gmail.com:password
</pre>

<p>
这里是配置当使用 <code>gmail</code> 的作为 <code>SMTP</code> 的 <code>relay sever</code> 的时候，使用的账号和密码。
<code>account</code> 和 <code>password</code> 替换为你真实的用户名和密码。
</p></li>
<li>编辑 <code>/etc/postfix/master.cf</code> 文件。
<img src="http://q78cpsmed.bkt.clouddn.com/postfix-dovecot-config/mastercf.png"></li>
</ul>
</div>
</div>
<div id="outline-container-orgd3cca53" class="outline-3">
<h3 id="orgd3cca53">配置Dovecot</h3>
<div class="outline-text-3" id="text-orgd3cca53">
<ul class="org-ul">
<li><p>
编辑 <code>/etc/dovecot/dovecot.conf</code> 文件, 确认支持的协议为 <code>imap</code> 和 <code>pop3</code>
</p>
<pre class="example">protocols = imap pop3
</pre></li>
<li><p>
编辑 <code>/etc/dovecot/conf.d/10-auth.conf</code> ，确认以下配置：
</p>
<pre class="example">disable_plaintext_auth = no
auth_mechanisms = plain login
</pre></li>
<li><p>
编辑 <code>/etc/dovecot/conf.d/10-ssl.conf</code>, 确认开启了 <code>ssl</code> 以及使用了正确的证书：
</p>
<pre class="example">ssl = yes
ssl_cert = &lt;/etc/pki/tls/certs/yourdomain.crt
ssl_key = &lt;/etc/pki/tls/private/yourdomain.key
</pre></li>
</ul>
</div>
</div>

<div id="outline-container-orgf9600cf" class="outline-3">
<h3 id="orgf9600cf">生效配置，重启服务</h3>
<div class="outline-text-3" id="text-orgf9600cf">
<ul class="org-ul">
<li><p>
更新 <code>postfix lookup table</code>
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo postmap /etc/postfix/sasl_passwd
sudo postmap  /etc/postfix/generic  
</pre>
</div></li>
<li><p>
重启 <code>postfix=， =dovecot</code> 服务
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo systemctl restart postfix
sudo systemctl restart dovecot        
</pre>
</div></li>
<li><p>
开机启动 <code>postfix</code>, <code>dovecot</code> 服务
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo systemctl enable postfix
sudo systemctl enable dovecot
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org26ade35" class="outline-3">
<h3 id="org26ade35">确认以及配置防火墙</h3>
<div class="outline-text-3" id="text-org26ade35">
<p>
下面是 <code>postfix</code>, <code>dovecot</code> 使用到的端口， 配置 <code>iptables</code> 打开这些端口。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-right">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Protocols</th>
<th scope="col" class="org-left">Usage</th>
<th scope="col" class="org-right">Plain Text/ encrypted session</th>
<th scope="col" class="org-right">Encrypted session only</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">POP3</td>
<td class="org-left">Incoming mail</td>
<td class="org-right">110</td>
<td class="org-right">995</td>
</tr>

<tr>
<td class="org-left">IMAP</td>
<td class="org-left">Incoming mail</td>
<td class="org-right">143</td>
<td class="org-right">993</td>
</tr>

<tr>
<td class="org-left">SMTP</td>
<td class="org-left">Outgoing mail</td>
<td class="org-right">25</td>
<td class="org-right">465</td>
</tr>

<tr>
<td class="org-left">Submission</td>
<td class="org-left">Outgoing mail</td>
<td class="org-right">587</td>
<td class="org-right">&nbsp;</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org1916d11" class="outline-2">
<h2 id="org1916d11">测试功能</h2>
<div class="outline-text-2" id="text-org1916d11">
<p>
在测试 <code>smtp</code> 和 <code>imap</code> 协议的时候， 对 <code>encrypted session only</code> 使用的端口默认是需要用 <code>openssl</code> 来访问的。
而非 <code>encrypted</code> 可以直接使用 <code>telnet</code> 来测试。
</p>

<ul class="org-ul">
<li><p>
测试 <code>SMTP</code> 服务
调用 <code>openssl</code> 访问服务器的 <code>465</code> 端口：
</p>
<div class="org-src-container">
<pre class="src src-bash">openssl s_client -connect mail.example.com:465
</pre>
</div>
<p>
返回 <code>ssl</code> 协商的结果
</p>
<pre class="example">New, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 4096 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: 4D22C02B32E6B83A7380CE7C69A69FEE3985CE7B653EB423CDCA29940
    Session-ID-ctx:
    Master-Key: 9E10F874F9052D5EE47DE164A3DC95A008A3829D6E7CBD071473D9313ADC3FD9DE9DE
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    TLS session ticket lifetime hint: 3600 (seconds)
    TLS session ticket:
    0000 - 07 ad 7b 9e c4 12 81 3f-13 06 ed c9 72 3a 08 e7   ..{....?....r:..
    0010 - 0e f2 72 84 70 18 47 17-94 b2 05 94 1a a7 6a 6c   ..r.p.G.......jl
    0020 - c5 37 04 ee f7 c0 36 0f-29 44 67 a9 cb f6 91 14   .7....6.)Dg.....
    0030 - 72 b6 21 45 fa 82 3b 8e-51 76 5b 4a 2e 6c 26 2a   r.!E..;.Qv[J.l&amp;*
    0040 - 15 0c a3 3d 2c ed de ee-41 04 26 0c 89 93 c3 4f   ...=,...A.&amp;....O
    0050 - e9 84 a0 46 68 73 b7 f4-94 3f 46 a9 af 37 a4 7f   ...Fhs...?F..7..
    0060 - 2f 3c 73 bc 43 8b 75 ac-5f 33 10 60 f6 d4 ca 74   /&lt;s.C.u._3.`...t
    0070 - a6 60 49 8f bc 7e be 73-1e 47 c5 6d 50 21 95 53   .`I..~.s.G.mP!.S
    0080 - 9b 78 82 d6 0d d5 32 20-eb 94 50 bc a6 b1 6f fe   .x....2 ..P...o.
    0090 - 03 ee 80 4d 09 35 47 14-e4 5d aa d2 18 1f c7 ee   ...M.5G..]......
    00a0 - ca 11 a6 c1 3f d3 66 42-df 3b 4d 66 0e 7e 95 89   ....?.fB.;Mf.~..
    00b0 - 62 d0 69 76 3b fd 74 7a-d7 86 d5 6a d0 23 f8 b3   b.iv;.tz...j.#..

    Start Time: 1584262970
    Timeout   : 7200 (sec)
    Verify return code: 18 (self signed certificate)
    Extended master secret: no
---
220 mail.example.com ESMTP Postfix
</pre>
<p>
输入 <code>auth login plain</code> 的命令, 后面跟上你的用户名密码的 <code>base64</code> 编码。
其中 <code>account</code>, <code>password</code> 用你真实的账号替换。
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="font-weight: bold;">echo</span> -ne <span style="font-style: italic;">"\0account\0password"</span> | base64
</pre>
</div>

<pre class="example">220 machineheart.tech ESMTP Postfix
AUTH LOGIN PLAIN AGFjY291bnQAcGFzc3dvcmQ=
501 5.5.4 Syntax: AUTH mechanism
AUTH LOGIN
334 VXNlcm5hbWU6
</pre>
<p>
看到类似的返回即表示验证成功。后面即可以使用 <code>smtp</code> 的常用命令类似 <code>mail from:</code>, <code>rcpt to:</code> 去发送邮件了。
</p></li>
<li><p>
测试 <code>IMAP</code> 服务
与 <code>smtp</code> 类似，也是使用 <code>openssl</code> 来测试 <code>993</code> 端口。
</p>
<div class="org-src-container">
<pre class="src src-bash">openssl s_client -connect mail.example.com:993
</pre>
</div>

<pre class="example"> *tag login account password*
 tag OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES 
 THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED 
 I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE 
 SNIPPET=FUZZY SPECIAL-USE] Logged in
 *tag list "" "*"*
 * LIST (\HasNoChildren \Sent) "." Sent
 * LIST (\HasNoChildren \Drafts) "." Drafts
 * LIST (\HasNoChildren) "." "Deleted Items"
 * LIST (\HasNoChildren) "." INBOX
tag OK List completed (0.001 + 0.000 secs).
</pre></li>
</ul>
</div>
</div>
</div>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>postfix</tag>
        <tag>dovecot</tag>
        <tag>mail</tag>
      </tags>
  </entry>
</search>
